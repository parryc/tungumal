// Generated by CoffeeScript 1.6.3
var Lexr, Word;

Lexr = (function() {
  var _typeIsArray;

  function Lexr(options) {
    var key, option;
    for (key in options) {
      option = options[key];
      this[key] = option;
    }
  }

  Lexr.prototype.words = {};

  Lexr.prototype.wordAttributesMap = [];

  _typeIsArray = Array.isArray || function(value) {
    return {}.toString.call(value) === '[object Array]';
  };

  Lexr.prototype.wordConfig = function(wordType, arrayConfig) {
    return this.wordAttributesMap[wordType] = arrayConfig;
  };

  Lexr.prototype.add = function(word, type, attributes) {
    var el, idx, wordAttributes, _i, _len;
    wordAttributes = {};
    if (_typeIsArray(attributes)) {
      for (idx = _i = 0, _len = attributes.length; _i < _len; idx = ++_i) {
        el = attributes[idx];
        wordAttributes[type][this.wordAttributesMap[idx]] = el;
      }
    } else {
      wordAttributes = attributes;
    }
    return this.words[word] = new Word(word, wordAttributes);
  };

  Lexr.prototype.addN = function(word, attributes) {
    return this.add(word, 'noun', attributes);
  };

  Lexr.prototype.addV = function(word, attributes) {
    return this.add(word, 'verb', attributes);
  };

  Lexr.prototype.w = function(word) {
    return this.words[word];
  };

  return Lexr;

})();

Word = (function() {
  function Word(lemma, options, orthography) {
    var key, option;
    this.lemma = lemma;
    this.orthography = orthography;
    for (key in options) {
      option = options[key];
      this[key] = option;
    }
  }

  Word.prototype.has = function(type, needle) {
    if (type === 'othography') {
      return this.match(this._getOrthographyRegExp(needle, true));
    }
  };

  Word.prototype.doesNotHave = function(type, needle) {
    if (type === 'othography') {
      return !this.match(this._getOrthographyRegExp(needle, true));
    }
  };

  Word.prototype._getOrthographyPath = function(path) {
    var part, split, temp, _i, _len;
    split = path.split('.');
    temp = this.orthography;
    for (_i = 0, _len = split.length; _i < _len; _i++) {
      part = split[_i];
      temp = temp[part];
    }
    return temp;
  };

  Word.prototype._getOrthographyRegExp = function(path, asString) {
    var graphs, letterSet, letters, stringForm;
    letterSet = [];
    letters = this._getOrthographyPath(path);
    graphs = letters.match(/(?!\()([^\()])*(?=\))|[^\(\)]/gi);
    stringForm = '(' + graphs.join('|') + ')';
    if (asString) {
      return stringForm;
    } else {
      return new RegExp(stringForm, 'gi');
    }
  };

  return Word;

})();

if (typeof module !== 'undefined' && (module.exports != null)) {
  exports.Lexr = Lexr;
  exports.Word = Word;
}
